package com.ibilet.controllers;

import com.ibilet.entities.User;
import com.ibilet.entities.Flight;
import com.ibilet.services.FlightService;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;


import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ExecutionException;

@Controller
public class FlightController {

    @Autowired
    private FlightService flightService;

    @GetMapping("/add-flight")
    public String showAddFlightForm(Model model) {
        return "add-flight";
    }

    @GetMapping("/flights")
    public String showFlights(Model model) throws ExecutionException, InterruptedException {
        List<Flight> flights = flightService.getAllFlights(); // Assuming you have a method in FlightService to retrieve all flights
        model.addAttribute("flights", flights);
        return "flights";
    }

    @PostMapping("/add-flight")
    public String addFlight(String planeType, int seatsEconomy, int seatsFirst, double economyPrice, double firstPrice, String departureCity, String arrivalCity, String departureHour, String arrivalHour, String workingDays, double discountPercentageDus, double discountPercentageIntors, String flightType, HttpSession session, Model model) throws ExecutionException, InterruptedException {
        User user = (User) session.getAttribute("loggedInUser");

        if (user == null || user.getRole() != User.Role.AIRLINE) {
            return "redirect:/"; // or an error page
        }

        Flight createdFlight = new Flight();
        String autoGeneratedCode = UUID.randomUUID().toString();
        String[] splittedWorkingDays = workingDays.split(", ");

        createdFlight.setCode(autoGeneratedCode);
        createdFlight.setPlaneType(planeType);
        createdFlight.setSeatsEconomy(seatsEconomy);
        createdFlight.setSeatsFirst(seatsFirst);
        createdFlight.setEconomyPrice(economyPrice);
        createdFlight.setFirstPrice(firstPrice);
        createdFlight.setDepartureCity(departureCity);
        createdFlight.setArrivalCity(arrivalCity);
        createdFlight.setDepartureHour(departureHour);
        createdFlight.setArrivalHour(arrivalHour);
        createdFlight.setWorkingDays(List.of(splittedWorkingDays));
        createdFlight.setDiscountPercentageDus(discountPercentageDus);
        createdFlight.setDiscountPercentageIntors(discountPercentageIntors);
        createdFlight.setFlightType(Flight.FlightType.valueOf(flightType.toUpperCase()));

        flightService.createFlight(createdFlight); // Save the flight using the FlightService
        return "redirect:/";
    }
}
